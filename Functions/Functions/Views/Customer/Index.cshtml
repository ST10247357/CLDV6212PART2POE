@model IEnumerable<Functions.Models.Customer>

@{
    ViewData["Title"] = "Customers";
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3">Customers</h1>
    <div>
        <a asp-action="Create" class="btn btn-dark me-2">Create New</a>
        <a asp-action="FilesDownload" class="btn btn-outline-dark">View Files</a>
    </div>
</div>

<div class="card mb-4 border-0 shadow-sm">
    <div class="card-body p-3">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="input-group input-group-lg">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-search text-muted"></i>
                    </span>
                    <input type="text" id="searchInput" class="form-control border-0 bg-light" placeholder="Search customers by name, email, phone, or address...">
                    <button class="btn btn-outline-secondary border-0 bg-light" type="button" id="clearSearch">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-4 mt-2 mt-md-0">
                <div class="d-flex justify-content-end">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-dark active" data-filter="all">All</button>
                        <button type="button" class="btn btn-outline-dark" data-filter="name">Name</button>
                        <button type="button" class="btn btn-outline-dark" data-filter="email">Email</button>
                        <button type="button" class="btn btn-outline-dark" data-filter="phone">Phone</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <div class="form-text">
                    <i class="bi bi-info-circle me-1"></i>
                    <span id="resultCount">Showing @Model.Count() customers</span>
                </div>
            </div>
        </div>
    </div>
</div>

<table class="table table-striped table-hover align-middle" id="customersTable">
    <thead class="table-dark">
        <tr>
            <th>Full Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Address</th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody id="customersTableBody">
        @foreach (var item in Model)
        {
            <tr class="customer-row" data-name="@item.Customer_Name.ToLower()" data-email="@item.Email.ToLower()" data-phone="@item.Phone?.ToLower()" data-address="@item.Address?.ToLower()">
                <td class="customer-name">@Html.DisplayFor(modelItem => item.Customer_Name)</td>
                <td class="customer-email">@Html.DisplayFor(modelItem => item.Email)</td>
                <td class="customer-phone">@Html.DisplayFor(modelItem => item.Phone)</td>
                <td class="customer-address">@Html.DisplayFor(modelItem => item.Address)</td>
                <td class="text-center">
                    <div class="dropdown">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="actionsMenu_@item.RowKey" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="actionsMenu_@item.RowKey">
                            <li>
                                <a class="dropdown-item" asp-action="Edit" asp-route-partitionKey="@item.PartitionKey" asp-route-rowKey="@item.RowKey">
                                    Edit
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item text-danger" asp-action="Delete" asp-route-partitionKey="@item.PartitionKey" asp-route-rowKey="@item.RowKey">
                                    Delete
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" asp-action="Details" asp-route-partitionKey="@item.PartitionKey" asp-route-rowKey="@item.RowKey">
                                    Details
                                </a>
                            </li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            const filterButtons = document.querySelectorAll('[data-filter]');
            const customerRows = document.querySelectorAll('.customer-row');
            const resultCount = document.getElementById('resultCount');

            let currentFilter = 'all';

            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    filterButtons.forEach(btn => btn.classList.remove('active'));
            
                    this.classList.add('active');
                    currentFilter = this.getAttribute('data-filter');

                    updatePlaceholder();
                    performSearch();
                });
            });

            searchInput.addEventListener('input', performSearch);

            clearSearch.addEventListener('click', function() {
                searchInput.value = '';
                performSearch();
                searchInput.focus();
            });

            function updatePlaceholder() {
                const placeholders = {
                    'all': 'Search customers by name, email, phone, or address...',
                    'name': 'Search by customer name...',
                    'email': 'Search by email address...',
                    'phone': 'Search by phone number...'
                };
                searchInput.placeholder = placeholders[currentFilter] || placeholders.all;
            }

            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                let visibleCount = 0;

                customerRows.forEach(row => {
                    let matches = false;

                    if (searchTerm === '') {
                        matches = true;
                    } else {
                        switch (currentFilter) {
                            case 'name':
                                matches = row.getAttribute('data-name').includes(searchTerm);
                                break;
                            case 'email':
                                matches = row.getAttribute('data-email').includes(searchTerm);
                                break;
                            case 'phone':
                                const phone = row.getAttribute('data-phone') || '';
                                matches = phone.includes(searchTerm);
                                break;
                            default: 
                                matches =
                                    row.getAttribute('data-name').includes(searchTerm) ||
                                    row.getAttribute('data-email').includes(searchTerm) ||
                                    (row.getAttribute('data-phone') || '').includes(searchTerm) ||
                                    (row.getAttribute('data-address') || '').includes(searchTerm);
                                break;
                        }
                    }

                    if (matches) {
                        row.style.display = '';
                        visibleCount++;
                       
                        highlightText(row, searchTerm);
                    } else {
                        row.style.display = 'none';
                    }
                });

             
                resultCount.textContent = `Showing ${visibleCount} of ${customerRows.length} customers`;

               
                clearSearch.style.visibility = searchTerm ? 'visible' : 'hidden';
            }

  
            function highlightText(row, searchTerm) {
                if (!searchTerm) return;

                const cells = row.querySelectorAll('td:not(:last-child)'); 

                cells.forEach(cell => {
                    const originalText = cell.textContent;
                    const regex = new RegExp(`(${escapeRegex(searchTerm)})`, 'gi');
                    const highlightedText = originalText.replace(regex, '<mark>$1</mark>');
                    cell.innerHTML = highlightedText;
                });
            }

            function escapeRegex(string) {
                return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            }

            updatePlaceholder();
            clearSearch.style.visibility = 'hidden';
        });
    </script>

    <style>
        .input-group-text {
            transition: all 0.3s ease;
        }

        .input-group:focus-within .input-group-text {
            background-color: #e9ecef !important;
            border-color: #86b7fe !important;
        }

        #searchInput:focus {
            box-shadow: none;
            background-color: #fff;
        }

        .bg-light {
            transition: all 0.3s ease;
        }

        .input-group:focus-within {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-radius: 0.375rem;
        }

        mark {
            background-color: #fff3cd;
            padding: 0.1rem 0.2rem;
            border-radius: 0.25rem;
        }

        .btn-outline-dark.active {
            background-color: #212529;
            color: #fff;
        }

        .card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
    </style>
}